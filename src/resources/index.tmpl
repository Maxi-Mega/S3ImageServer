{{template "html_body" .}}
<script>
    let images = {{.PreviewsMap}};
    const previewFilename = {{.PreviewFilename}};
    const prefixName = {{.PrefixName}};
    const retentionPeriod = {{.RetentionPeriod}}; // in seconds
    const refreshPeriod = {{.PollingPeriod}}; // in seconds

    const inputs = {};
    const searchInput = document.getElementById("search");
    const container = document.querySelector("div.container");
    const modal = document.getElementById("modal");
    const modalImg = document.getElementById("modal-img");
    const modalLinks = document.getElementById("modal-links");

    function formatTitle(title) {
        title = title.substring(prefixName.length === 0 ? 0 : prefixName.length + 1, title.lastIndexOf("@")).replaceAll("@", "/"); // .replace("/" + previewFilename, "");
        const imgType = title.substring(0, title.indexOf("/"));
        const imgName = title.substring(title.lastIndexOf("/") + 1);
        return imgType + "\n" + imgName;
    }

    function modalize(img) {
        fetch("infos/" + img.alt).then(response => { // .replaceAll("@", "/")
            response.json().then(jsonData => {
                jsonData = jsonData.data;
                document.getElementById("modal-img-date").innerText = "Generation date: " + jsonData["date"];
                while (modalLinks.hasChildNodes()) {
                    modalLinks.removeChild(modalLinks.firstChild);
                }
                for (const link of jsonData["links"]) {
                    const li = document.createElement("li");
                    const a = document.createElement("a");
                    a.href = link;
                    a.innerText = link.substring(link.lastIndexOf("/") + 1);
                    li.appendChild(a);
                    modalLinks.appendChild(li);
                }
            }).catch(reason => {
                console.warn("Failed to jsonify links:", reason);
            });
        }).catch(reason => {
            console.warn("Failed to get image links:", reason);
        });
        modalImg.classList.add("show");
        modalImg.src = img.src;
        modalImg.alt = img.alt;
        const parentDiv = img.parentElement;
        document.getElementById("modal-img-type").innerText = "Type: " + parentDiv.getAttribute("img-type");
        document.getElementById("modal-img-name").innerText = "Name: " + parentDiv.getAttribute("img-name");
        modal.style.display = "flex";
    }

    function addNewImg(img, addToList = true) {
        const newImg = document.createElement("img");
        newImg.src = "/image/" + img + "?time=" + new Date().getTime();
        newImg.alt = img;
        newImg.addEventListener("click", () => modalize(newImg));
        const newA = document.createElement("a");
        newA.classList.add("img-title");
        newA.href = "/image/" + img;
        newA.target = "_blank";
        newA.title = "Click to open the image in a new tab";
        const imgTitle = formatTitle(img);
        newA.innerText = imgTitle;
        const newDiv = document.createElement("div");
        newDiv.classList.add("img-container");
        newDiv.appendChild(newImg);
        newDiv.appendChild(newA);
        const imgType = img.substring(prefixName.length === 0 ? 0 : prefixName.length + 1).split("@")[0];
        newDiv.setAttribute("img-type", imgType);
        newDiv.setAttribute("img-name", imgTitle.substring(imgTitle.indexOf("\n") + 1));
        if (inputs.hasOwnProperty(imgType)) {
            if (!inputs[imgType].checked) {
                newDiv.classList.add("filter-hidden");
            }
        }
        if (searchInput.value !== "") {
            if (!newA.innerText.toLowerCase().includes(searchInput.value.toLowerCase())) {
                newDiv.classList.add("search-hidden");
            }
        }

        // newImg.onload = () => {
        // document.body.appendChild(newDiv);
        container.insertBefore(newDiv, container.firstChild);
        if (addToList) {
            // images.push(img); TODO
        }
        countImages();
        setTimeout(() => {
            if (container.contains(newDiv)) {
                container.removeChild(newDiv);
                // remove from images list
                // images.splice(images.indexOf(img), 1); TODO
                countImages();
            }
        }, retentionPeriod * 1000);
        console.info("Scheduled image removal at in", retentionPeriod + "s");
        // };
        newImg.onerror = () => {
            console.warn("Image", img, "not found");
        };
    }

    function arrArraysEquals(arr1, arr2) {
        if (arr1.length !== arr2.length) {
            return false;
        }
        for (let i = 0; i < arr1.length; i++) {
            if (arr1[i] !== arr2[i]) {
                return false;
            }
        }
        return true;
    }

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll(".img-title").forEach(p => {
            const imgTitle = formatTitle(p.innerText);
            p.innerText = imgTitle;
            p.parentElement.setAttribute("img-type", p.innerText.split("\n")[0]);
            p.parentElement.setAttribute("img-name", imgTitle.substring(imgTitle.indexOf("\n") + 1));
        });
        document.querySelectorAll("img:not(#modal-img)").forEach(img => {
            img.addEventListener("click", () => modalize(img));
            setTimeout(() => {
                container.removeChild(img.parentElement);
                // remove from images list
                // images.splice(images.indexOf(img.alt), 1); TODO
                delete images[img.src]; // done
                countImages();
            }, retentionPeriod * 1000);
        });
        modal.addEventListener("click", () => {
            modalImg.classList.remove("show");
            modal.style.display = "";
        });
        document.getElementById("modal-links").addEventListener("click", ev => {
            ev.stopPropagation();
        });

        document.querySelectorAll(".filters input[type=checkbox]").forEach(inpt => {
            inpt.checked = true;
            const value = inpt.parentElement.innerText.trim();
            inputs[value] = inpt;
            inpt.addEventListener("input", () => {
                if (inpt.checked) {
                    document.querySelectorAll(`div[img-type="${value}"]`).forEach(container => container.classList.remove("filter-hidden"));
                } else {
                    document.querySelectorAll(`div[img-type="${value}"]`).forEach(container => container.classList.add("filter-hidden"));
                }
                countImages();
            });
        });

        searchInput.value = "";
        searchInput.addEventListener("input", () => {
            const value = searchInput.value.toLowerCase();
            if (value === "") {
                document.querySelectorAll("div.search-hidden").forEach(container => container.classList.remove("search-hidden"));
            } else {
                document.querySelectorAll("div > a.img-title").forEach(a => {
                    if (a.innerText.toLowerCase().includes(value)) {
                        a.parentElement.classList.remove("search-hidden");
                    } else {
                        a.parentElement.classList.add("search-hidden");
                    }
                });
            }
            countImages();
        });

        setInterval(() => {
            return new Promise((success, reject) => { // TODO: fetch
                let request = new XMLHttpRequest();
                request.onload = function () {
                    if (this.status === 200 && this.responseText != null) {
                        let jsonResult = JSON.parse(request.responseText);
                        success(jsonResult);
                    } else {
                        if (this.responseText == null) {
                            reject(this.status + " - " + this.error);
                        } else {
                            reject(this.status + " - " + this.error + " " + JSON.parse(request.responseText).message);
                        }
                    }
                }
                request.onerror = function (ev) {
                    reject(ev);
                }
                request.open("GET", location.origin + "/images");
                request.send();
            }).then(result => {
                const lastestImages = result.data;
                console.info("New images:", lastestImages);
                images = lastestImages;
                /*const sameImages = arrArraysEquals(lastestImages, images);
                if (!sameImages) {
                    container.querySelectorAll("div.img-container").forEach(e => container.removeChild(e));
                    countImages();
                    images = lastestImages;
                    for (let i = images.length - 1; i >= 0; i--) {
                        console.info("Found new image:", images[i]);
                        addNewImg(images[i], false);
                    }
                }*/
            }).catch(reason => {
                console.warn(reason);
            });
        }, refreshPeriod * 1000);
    });
</script>
</body>
</html>
