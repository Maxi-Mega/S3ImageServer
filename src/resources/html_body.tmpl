{{define "html_body"}}
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <title>{{.WindowTitle}}</title>
        <meta charset="utf-8">
        <link rel="stylesheet" href="{{.BasePath}}/vendor/openlayers/ol.css">
        <style>
            :root {
                --color-background-dark: #1c1c1c;

                --color-glacier-blue: #ccd7d9;
                --color-secondary-blue: #20abfe;

                --header-text-color: #101010;
                /*TODO: --header-input-color: var(#0375fa);*/
                --header-background-color: var(--color-glacier-blue);
            }

            body {
                margin: 10px 10px 0;
                padding-top: 15px;
                background-color: var(--color-background-dark);
                /*display: flex;
                justify-content: space-between;
                align-items: center;
                flex-flow: row wrap;*/
            }

            header {
                width: 100%;
                height: 20px;
                display: flex;
                position: fixed;
                left: 0;
                top: 0;
                padding: 10px;
                /*background-color: #393939;*/
                background-color: var(--header-background-color);
                justify-content: space-between;
                z-index: 10;
                font-size: 15px;
            }

            .filters {
                display: flex;
                align-items: center;
                /*color: #e4d3c1;*/
                color: var(--header-text-color);
            }

            .filters .img-group-dropdown {
                margin-left: 30px;
                /*color: #e4d3c1;*/
                color: var(--header-text-color);
                -webkit-user-select: none; /* Chrome all / Safari all */
                -moz-user-select: none; /* Firefox all */
                -ms-user-select: none; /* IE 10+ */
                user-select: none;
            }

            .filters .img-group-dropdown:first-of-type {
                margin-left: 10px;
            }

            .filters .dropdown-title {
                cursor: pointer;
            }

            .filters .img-group-dropdown.selected .dropdown-title {
                color: var(--header-text-color);
            }

            .filters .img-group-dropdown-content {
                display: none;
                flex-flow: column;
                position: absolute;
                background-color: var(--color-glacier-blue);
                padding-top: 5px;
                padding-left: 2px;
                transform: translateX(-2px);
            }

            .filters .img-group-dropdown.selected > .img-group-dropdown-content {
                display: flex;
            }

            .filters .img-group-dropdown-content label {
                padding-top: 5px;
                margin: 0 5px 5px 0;
            }

            header label {
                /*color: #e4d3c1;*/
                color: var(--header-text-color);
            }

            #header-right {
                display: flex;
                align-items: center;
            }

            #header-right label {
                margin-left: 20px;
            }

            header label[for='scaler'] {
                display: flex;
                align-items: center;
                margin: 0;
            }

            #search {
                opacity: 0.5;
            }

            #img-count {
                margin-right: 20px;
            }

            #scaler-container {
                margin-right: 10px;
            }

            #scaler {
                max-width: 100px;
            }

            header #version {
                /*color: #e4d3c1;*/
                color: var(--header-text-color);
                font-size: 12px;
                align-self: center;
                transform: translateX(-25%);
                margin-left: 30px;
            }

            .container {
                /*max-width: 100vw;
                display: grid;
                grid-template-columns: repeat(4, 1fr);*/
                display: flex;
                flex-flow: row wrap;
                justify-content: space-evenly;
                align-items: baseline;
            }

            .img-container {
                width: min-content;
                height: auto;
                margin: 20px 10px;
                display: grid;
                justify-content: center;
                text-align: center;
                /*transform: scale(0.9, 0.9);*/
                /*transition: all ease-in-out 1s;*/
            }

            .features-container {
                position: relative;
            }

            .image-features {
                position: absolute;
                top: 4px;
                left: 50%;
                transform: translateX(-50%);
                background-color: var(--color-background-dark);
                line-height: 1.7;
                font-weight: bold;
                font-size: 14px;
                margin: 0;
                color: rgb(0, 210, 0);
                text-align: left;
            }

            .feature-categories {
                font-size: 11px;
                list-style-type: none;
                margin-top: -5px;
                padding: 0;
                line-height: 0.7;
            }

            .filter-hidden, .search-hidden {
                display: none;
            }

            .features-container {
                cursor: pointer;
            }

            .features-container > img {
                max-width: 22vw;
                /*animation: fadein ease-out 1s;*/
            }

            .img-title {
                margin-top: 5px;
                color: #e4d3c1;
                font-family: Arial, sans-serif;
                font-size: 10px;
                text-decoration: none;
                text-align: center;
            }

            .img-title:hover {
                text-decoration: underline;
            }

            #modal {
                z-index: 500;
                display: none;
                position: fixed;
                background-color: rgba(0, 0, 0, 0.5);
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                justify-content: space-around;
                align-items: flex-start;
                font-family: "DejaVu Sans", sans-serif;
            }

            #modal-content {
                min-width: 95%;
                max-width: 95%;
                min-height: 90%;
                max-height: 90%;
                margin-top: 50px;
                padding: 10px;
                display: flex;
                flex-flow: column nowrap;
                align-items: center;
                justify-content: flex-start;
                background-color: var(--color-glacier-blue);
                font-size: 14px;
            }

            #modal-header {
                width: 100%;
                margin-bottom: 10px;
                display: flex;
                flex-flow: row nowrap;
                align-items: center;
                justify-content: space-evenly;
            }

            #modal-header p {
                margin: 1px 0;
            }

            #modal-header > * {
                padding: 5px 10px;
            }

            #modal #details {
                width: 60%;
                height: 40px;
                border: 2px solid var(--color-secondary-blue);
                background-color: white;
            }

            #modal #details span {
                font-weight: bold;
            }

            #modal #details #characteristics {
                display: flex;
                flex-flow: row nowrap;
                align-items: center;
                justify-content: space-between;
            }

            #modal #details #characteristics #features-type {
                font-weight: normal;
            }

            #modal #geonames {
                width: 30%;
                height: 40px;
                margin: 0;
                font-size: 14px;
                overflow-y: auto;
                line-height: 3.1;
                border: 2px solid var(--color-secondary-blue);
                background-color: white;
            }

            #modal #geonames #geonames-full {
                line-height: 1.2;
            }

            #modal .previous-next-image-container {
                width: 5%;
                padding-right: 5px;
                padding-left: 15px;
                display: flex;
                flex-flow: row nowrap;
                align-items: center;
                justify-content: space-evenly;
            }

            #modal .previous-next-image-container p {
                color: var(--color-secondary-blue);
                font-size: 2em;
                cursor: pointer;
            }

            #modal .previous-next-image-container > p:hover {
                opacity: 0.5;
            }

            #modal .previous-next-image-container #previous-image-button {
                transform: rotate(180deg) translateY(-2px);
            }

            #modal #content {
                width: 99.3%;
                display: flex;
                flex-flow: row nowrap;
                align-items: flex-start;
                justify-content: space-around;
            }

            #modal #content #img-container {
                width: 40%;
                margin-right: 10px;
            }

            #modal #content #modal-img {
                max-width: 100%;
            }

            #modal-img.show {
                z-index: 1000;
                border: 2px solid var(--color-secondary-blue);
                max-width: 50vw;
                max-height: 80vh;
                margin-right: 10px;
            }

            #modal #content #content-details {
                width: 60%;
                display: flex;
                flex-flow: column nowrap;
                align-self: baseline;
                align-items: center;
            }

            #modal #content #content-details #details-top {
                width: 100%;
                display: flex;
                flex-flow: row nowrap;
            }

            #modal #content-details #modal-links {
                max-width: 87%;
                min-width: 87%;
                height: 6em;
                margin-right: 10px;
                margin-bottom: 10px;
                padding: 5px 10px;
                border: 2px solid var(--color-secondary-blue);
                background-color: white;
                overflow-y: auto;
            }

            #modal #content-details #modal-links li {
                list-style-type: none;
                margin: 3px 0;
                font-size: 14px;
            }

            #modal #content-details #modal-links a {
                color: black;
            }

            #modal #content #content-details #details-top #thumbnails-control {
                max-width: 9%;
                display: flex;
                flex-flow: column;
                justify-content: space-between;
                align-items: start;
            }

            #modal #content #thumbnails-control #carto-thumbnails-toggle {
                visibility: hidden;
                padding: 0 5px;
            }

            #modal #content #thumbnails-control #thumbnails-scaler {
                max-width: 100%;
                margin-bottom: 10px;
            }

            #modal #content #thumbnails-control #thumbnails-count {
                margin: 0 0 5px 2px;
            }

            #modal #content-details #modal-thumbnails {
                max-height: 70vh;
                border: 2px solid var(--color-secondary-blue);
                background-color: var(--color-background-dark);
                display: flex;
                flex-flow: row wrap;
                justify-content: space-evenly;
                overflow-y: auto;
            }

            #modal #modal-thumbnails .thumbnail-container {
                margin: 5px;
                display: flex;
                flex-flow: column nowrap;
                justify-content: flex-start;
                align-items: center;
            }

            #modal #modal-carto {
                width: 99.65%;
                height: 70vh;
                border: 2px solid var(--color-secondary-blue);
            }

            #modal #carto-coords {
                display: none;
                transform: translateY(-165%);
                background-color: rgba(255, 255, 255, 0.75);
                padding: 1px 5px;
            }

            #modal #modal-close {
                position: absolute;
                top: 47px;
                right: 2.1vw;
                color: black;
                font-size: 25px;
                cursor: pointer;
            }

            .no-copy {
                -webkit-user-select: none; /* Chrome all / Safari all */
                -moz-user-select: none; /* Firefox all */
                -ms-user-select: none; /* IE 10+ */
                user-select: none; /* Likely future */
            }

            @keyframes fadein {
                from {
                    opacity: 0;
                }
                to {
                    opacity: 1;
                }
            }
        </style>
    </head>
    <body>
    <header>
        <div class="filters">
            {{range .ImageGroups}}
                {{$groupName := .GroupName}}
                <div class="img-group-dropdown">
                    <input class="check-all" type="checkbox" name="{{$groupName}}">
                    <span class="dropdown-title">{{.GroupName}}</span>
                    <div class="img-group-dropdown-content">
                        {{range .Types}}
                            <label>
                                <input type="checkbox" name="{{.Name}}" img-group="{{$groupName}}">
                                {{.DisplayName}}
                            </label>
                        {{end}}
                    </div>
                </div>
            {{end}}
        </div>
        <div id="header-right">
            <label for="search" style="padding-left: 50px">
                Search:
                <input id="search" type="text" size="15"
                       title="Included in image name, case insensitive">
            </label>
            <label id="img-count" title="visible/total"></label>
            <div id="scaler-container">
                <label for="scaler" title="Middleclick to reset">
                    <span>Scale:&nbsp;</span>
                    <input id="scaler" type="range" min="10" max="30" step="1">
                </label>
            </div>
            <div id="version">Version: {{.Version}}</div>
        </div>
    </header>
    <div class="container">
        {{- $basePath := .BasePath -}}
        {{range .Previews}}
            <div class="img-container" img-type="{{.ImgType}}" img-name="{{.ImgKey}}" img-date="{{.ImgDate}}">
                <div class="features-container">
                    <img src="{{$basePath}}/image/{{.ImgKey}}" alt="{{.ImgKey}}" title="{{.ImgType}}\n{{.ImgKey}}\n{{.ImgDate}}"/>
                    <pre class="image-features">
{{- if ne .Features.Class "" -}}
&nbsp;{{.Features.Class}}: {{.Features.Count}}&nbsp;
{{- end -}}
<ul class="feature-categories">
{{- range $feature, $count := .Features.Objects}}
<li>&nbsp;&nbsp;&nbsp;{{$feature}}: {{$count}}&nbsp;</li>
{{- end -}}
</ul></pre>
                </div>
                <br/>
                <a class="img-title" href="{{$basePath}}/image/{{.ImgKey}}" target="_blank"
                   title="Click to open the image in a new tab">{{.ImgName}}</a>
            </div>
        {{end}}
    </div>
    <div id="modal">
        <div id="modal-content">
            <div id="modal-header">
                <div id="details">
                    <p>Name: <span id="modal-img-name"></span></p>
                    <div id="characteristics">
                        <p>Type: <span id="modal-img-type"></span></p>
                        <p>Generation date: <span id="modal-img-date"></span></p>
                        <p><span id="features-type"></span><span id="features-count"></span></p>
                    </div>
                </div>
                <pre id="geonames"></pre>
                <div class="previous-next-image-container no-copy">
                    <p id="previous-image-button" title="Previous image">&#10148;</p>
                    <p id="next-image-button" title="Next image">&#10148;</p>
                </div>
            </div>
            <div id="content">
                <div id="img-container">
                    <a id="modal-img-link" href="" target="_blank">
                        <img id="modal-img" src="" alt=""/>
                    </a>
                </div>
                <div id="content-details">
                    <div id="details-top">
                        <div id="modal-links"></div>
                        <div id="thumbnails-control">
                            <button id="carto-thumbnails-toggle"></button>
                            <br />
                            <p id="thumbnails-count"></p>
                            <input id="thumbnails-scaler" type="range" min="10" max="22" step="1">
                        </div>
                    </div>
                    <div id="modal-thumbnails"></div>
                    <div id="modal-carto"></div>
                    <span id="carto-coords">Coordinates:</span>
                </div>
            </div>
            <span id="modal-close" title="Click to close">&times;</span>
        </div>
    </div>
    <script>
        let globalScaler, thumbnailsScaler;
        let cartoMap = null;
        let cartoLayer = null;
        let cartoExtent = null;

        const thumbnailScalerProps = {
            baseScale: 30,
            imgSelector: "#modal-thumbnails .thumbnail-container, #modal-thumbnails .thumbnail-container img",
            titleSelector: "#modal-thumbnails .thumbnail-container a.img-title"
        };

        function countImages() {
            const visible = document.querySelectorAll("div.img-container:not(.filter-hidden):not(.search-hidden)").length;
            const total = document.querySelectorAll("div.img-container").length;
            document.getElementById("img-count").innerText = `(${visible} / ${total})`;
        }

        function switchToImage(relativeIndex) {
            if (!modalImg.classList.contains("show")) {
                return;
            }
            const currentImageSrc = modalImg.src;
            const allImages = Array.from(document.querySelectorAll("div.img-container:not(.filter-hidden):not(.search-hidden)")).map(div => div.querySelector("img"));

            for (let i = 0; i < allImages.length; i++) {
                if (allImages[i].src === currentImageSrc) {
                    const targetImageIndex = i + relativeIndex;
                    closeModal();
                    if (targetImageIndex < 0) {
                        modalize(allImages[allImages.length - 1]);
                    } else if (targetImageIndex >= allImages.length) {
                        modalize(allImages[0]);
                    } else {
                        modalize(allImages[targetImageIndex]);
                    }
                    return;
                }
            }
        }

        document.addEventListener("DOMContentLoaded", () => {

            document.querySelectorAll(".filters .img-group-dropdown").forEach(dropdown => {
                const span = dropdown.querySelector("span.dropdown-title");
                span.addEventListener("click", () => {
                    document.querySelectorAll(".filters .img-group-dropdown.selected").forEach(other => other !== dropdown ? other.classList.remove("selected") : null);
                    dropdown.classList.toggle("selected");
                });
                const input = dropdown.querySelector("input.check-all");
                input.checked = true;
                input.addEventListener("input", () => {
                    const checked = input.checked;
                    input.indeterminate = false;
                    dropdown.querySelectorAll(".img-group-dropdown-content input[type=checkbox]").forEach(inpt => {
                        inpt.checked = checked;
                    });
                    const groupName = input.getAttribute("name");
                    const children = Array.from(document.querySelectorAll(".filters .img-group-dropdown-content input[type=checkbox]")).filter(e => e.getAttribute("img-group") === groupName);
                    children.forEach(child => {
                        document.querySelectorAll(`div[img-type="${child.getAttribute("name")}"]`).forEach(container => {
                            if (checked) {
                                container.classList.remove("filter-hidden");
                            } else {
                                container.classList.add("filter-hidden");
                            }
                        });
                    });
                    countImages();
                });
            });

            countImages();

            globalScaler = new Scaler(document.getElementById("scaler"), document.getElementById("scaler-container"), {{- .ScaleInitialPercentage -}}, 40, "img:not(#modal-img)", "a.img-title");
            globalScaler.updateScale();

            document.getElementById("modal-close").addEventListener("click", () => closeModal());
            modal.addEventListener("click", ev => {
                if (ev.target === modal) {
                    closeModal();
                }
            });

            document.querySelector("#modal #modal-header .previous-next-image-container").addEventListener("click", (ev) => {
                // Prevent previous/next misclick
                ev.stopImmediatePropagation();
            });

            document.getElementById("previous-image-button").addEventListener("click", (ev) => {
                ev.stopImmediatePropagation();
                switchToImage(-1);
            });
            document.getElementById("next-image-button").addEventListener("click", (ev) => {
                ev.stopImmediatePropagation();
                switchToImage(1);
            });

            thumbnailsScaler = new Scaler(document.getElementById("thumbnails-scaler"),
                document.getElementById("thumbnails-scaler"), {{- .ScaleInitialPercentage -}},
                thumbnailScalerProps.baseScale, thumbnailScalerProps.imgSelector, thumbnailScalerProps.titleSelector);

            const cartoThumbnailsToggle = document.getElementById("carto-thumbnails-toggle");
            cartoThumbnailsToggle.addEventListener("click", () => {
                const thumbnailsContainer = document.getElementById("modal-thumbnails");
                const cartoContainer = document.getElementById("modal-carto");
                if (cartoThumbnailsToggle.getAttribute("toggled") === "carto") {
                    thumbnailsContainer.style.display = "flex";
                    cartoContainer.style.display = "none";
                    cartoThumbnailsToggle.innerText = "Map";
                    cartoThumbnailsToggle.setAttribute("toggled", "thumbnails");
                } else {
                    cartoContainer.style.display = "block";
                    thumbnailsContainer.style.display = "none";
                    cartoThumbnailsToggle.innerText = "Thumbnails";
                    cartoThumbnailsToggle.setAttribute("toggled", "carto");
                    cartoMap.updateSize();
                    cartoMap.getView().fit(cartoExtent);
                }
            });

            // carto
            ol.proj.useGeographic();
            cartoMap = new ol.Map({
                target: "modal-carto",
                layers: [
                    new ol.layer.Tile({
                        source: new ol.source.OSM({
                            url: "{{.TileServerURL}}"
                        }),
                    }),
                ],
                view: new ol.View({
                    center: [0, 0],
                    zoom: 10,
                }),
            });
            const scaleline = new ol.control.ScaleLine();
            cartoMap.addControl(scaleline);
            const cartoCoords = document.getElementById("carto-coords");
            cartoMap.on("pointermove", evt => {
                const coords = evt.coordinate.map(coord => coord.toFixed(10)).join(" ");
                cartoCoords.innerText = "Lon / Lat: " + coords;
                cartoCoords.style.display = "block";
            });
        });

        class Scaler {
            constructor(scaler, container, scalerInitialPercentage, baseScale, imgSelector, fontSelector) {
                this.scaler = scaler;
                this.container = container;
                this.scalerInitialPercentage = scalerInitialPercentage;
                this.baseScale = baseScale;
                this.imgSelector = imgSelector;
                this.fontSelector = fontSelector;

                this.scalerMinValue = Number(scaler.min);
                this.scalerMaxValue = Number(scaler.max);
                this.currentImgWidth = "";
                this.currentFontSize = "";

                this.scaler.value = this.evalInitialValue();
                this.evalScaler();

                this.scaler.addEventListener("input", () => this.updateScale());
                this.scaler.addEventListener("auxclick", () => {
                    this.scaler.value = this.evalInitialValue();
                    this.updateScale();
                });
            }

            evalInitialValue() {
                return this.scalerMinValue + ((this.scalerMaxValue - this.scalerMinValue) * this.scalerInitialPercentage / 100.0);
            }

            evalScaler() {
                this.currentImgWidth = (this.baseScale - this.scaler.value) + "vw";
                this.currentFontSize = Math.round(14 - this.scaler.value / 10) + "px";
            }

            updateScale() {
                this.evalScaler();
                document.querySelectorAll(this.imgSelector).forEach(img => {
                    img.style.maxWidth = this.currentImgWidth;
                    img.style.minWidth = this.currentImgWidth;
                });
                document.querySelectorAll(this.fontSelector).forEach(title => title.style.fontSize = this.currentFontSize);
            }
        }
    </script>
    <script src="{{.BasePath}}/vendor/openlayers/ol.js"></script>
{{end}}