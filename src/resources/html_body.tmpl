{{define "html_body"}}
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <title>{{.WindowTitle}}</title>
        <meta charset="utf-8">
        <style>
            body {
                margin: 10px 10px 0;
                padding-top: 15px;
                background-color: #1c1c1c;
                /*display: flex;
                justify-content: space-between;
                align-items: center;
                flex-flow: row wrap;*/
            }

            header {
                width: 100%;
                height: 20px;
                display: flex;
                position: fixed;
                left: 0;
                top: 0;
                padding: 10px;
                background-color: #393939;
                justify-content: space-between;
                z-index: 10;
            }

            .filters {
                display: flex;
                align-items: center;
            }

            header label {
                margin-left: 40px;
                color: #e4d3c1;
                font-size: 14px;
            }

            header label[for='scaler'] {
                display: flex;
                align-items: center;
                margin: 0;
            }

            .filters input#search {
                opacity: 0.5;
            }

            header #version {
                color: #e4d3c1;
                font-size: 12px;
                align-self: center;
                transform: translateX(-25%);
            }

            .container {
                /*max-width: 100vw;
                display: grid;
                grid-template-columns: repeat(4, 1fr);*/
                display: flex;
                flex-flow: row wrap;
                justify-content: space-evenly;
                align-items: baseline;
            }

            .img-container {
                /*width: 33%;
                max-width: 33%;*/
                height: auto;
                margin: 20px 10px;
                display: grid;
                justify-content: center;
                text-align: center;
                /*transform: scale(0.9, 0.9);*/
                /*transition: all ease-in-out 1s;*/
            }

            .filter-hidden {
                display: none;
            }

            .search-hidden {
                display: none;
            }

            img:not(#modal-img) {
                max-width: 22vw;
                cursor: pointer;
                /*animation: fadein ease-out 1s;*/
            }

            .img-title {
                margin-top: 5px;
                color: #e4d3c1;
                font-family: Arial, sans-serif;
                font-size: 10px;
                text-decoration: none;
            }

            .img-title:hover {
                text-decoration: underline;
            }

            #modal {
                z-index: 500;
                display: none;
                position: fixed;
                background-color: rgba(0, 0, 0, 0.5);
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                justify-content: space-around;
                align-items: center;
                font-family: "DejaVu Sans", sans-serif;
            }

            #modal-content {
                width: 50%;
                display: flex;
                flex-flow: row nowrap;
                align-items: center;
                justify-content: space-evenly;
            }

            #modal-img {
                z-index: 1000;
                /* position: fixed;
                 width: auto;
                 max-height: 99vh;
                 top: 50%;
                 left: 50%;
                 transform: translate(-50%, -50%);
                 animation: none;*/
            }

            #modal-img.show {
                /*animation: fadein ease-out 1s;
                animation-delay: -0.5s;*/
            }

            #modal-content ul li {
                list-style-type: none;
                margin: 3vh 0;
            }

            #modal-content a {
                color: white;
            }

            @keyframes fadein {
                from {
                    opacity: 0;
                }
                to {
                    opacity: 1;
                }
            }
        </style>
    </head>
    <body>
    <header>
        <div class="filters">
            {{range .ImageTypes}}
                <label>
                    <input type="checkbox">
                    {{.}}
                </label>
            {{end}}
            <label for="search" style="padding-left: 50px">
                Search:
                <input id="search" type="text" title="Included in image name, case insensitive">
            </label>
            <label id="img-count" title="visible/total"></label>
        </div>
        <div id="scaler-container">
            <label for="scaler" title="Middleclick to reset">
                <span>Scale:&nbsp;</span>
                <input id="scaler" type="range" min="10" max="30" step="1">
            </label>
        </div>
        <div id="version">Version: {{.Version}}</div>
    </header>
    <div class="container">
        {{range .Previews}}
            <div class="img-container">
                <img src="/image/{{.}}" alt="{{.}}"/>
                <br/>
                <a class="img-title" href="/image/{{.}}" target="_blank"
                   title="Click to open the image in a new tab">{{.}}</a>
            </div>
        {{end}}
    </div>
    <div id="modal" title="Click to close">
        <div id="modal-content">
            <img id="modal-img" src="" alt=""/>
            <ul id="modal-links">
                    <li>
                        <a href=""></a>
                    </li>
            </ul>
        </div>
    </div>
    <script>
        function countImages() {
            const visible = document.querySelectorAll("div.img-container:not(.filter-hidden):not(.search-hidden)").length;
            const total = document.querySelectorAll("div.img-container").length;
            document.getElementById("img-count").innerText = "(" + visible + " / " + total + ")";
        }

        document.addEventListener("DOMContentLoaded", () => {

            countImages();

            const scaler = document.getElementById("scaler");
            scaler.value = 22;
            const updateScale = () => {
                const imgWidth = (40 - scaler.value) + "vw";
                document.querySelectorAll("img:not(#modal-img)").forEach(img => img.style.maxWidth = imgWidth);
            }
            scaler.addEventListener("input", updateScale);
            document.getElementById("scaler-container").addEventListener("auxclick", () => {
                scaler.value = 22;
                updateScale();
            })

            /*const initialWindowHeight = window.innerHeight;

            const initialHeaderHeight = 20;
            const initialHeaderPadding = 10;
            const initialLabelSize = 14;
            const initialLabelMargin = 40;
            const initialCheckboxSize = 100;
            const initialCheckboxMargin = 3;
            const initialTextInputSize = 13;
            const initialVersionSize = 12;
            const header = document.querySelector("header");

            window.visualViewport.onresize = () => {
                const height = window.innerHeight;
                const getRatio = initialSize => initialSize * height / initialWindowHeight;

                // Header
                const calculatedHeight = getRatio(initialHeaderHeight);
                header.style.height = calculatedHeight + "px";
                const calculatedPadding = getRatio(initialHeaderPadding);
                header.style.padding = calculatedPadding + "px 0";

                // Labels
                const calculatedLabel = getRatio(initialLabelSize);
                const calculatedLabelMargin = getRatio(initialLabelMargin);
                header.querySelectorAll(".filters label").forEach(e => {
                    e.style.fontSize = calculatedLabel + "px";
                    e.style.marginLeft = calculatedLabelMargin + "px";
                });

                // Checkboxes
                const calculatedCheckbox = getRatio(initialCheckboxSize);
                const calculatedCheckboxMargin = getRatio(initialCheckboxMargin);
                header.querySelectorAll(".filters input[type='checkbox']").forEach(e => {
                    e.style.transform = `scale(${calculatedCheckbox}%`;
                    e.style.margin = calculatedCheckboxMargin + "px";
                });

                // Text input
                const calculatedTextInput = getRatio(initialTextInputSize);
                header.querySelectorAll(".filters input[type='text']").forEach(e => {
                    e.style.fontSize = calculatedTextInput + "px";
                });

                // Version
                const calculatedVersion = getRatio(initialVersionSize);
                header.querySelector("#version").style.fontSize = calculatedVersion + "px";
            }*/
        });
    </script>
{{end}}