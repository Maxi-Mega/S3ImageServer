{{template "html_body" .}}
<script>
    const images = {{.Previews}};
    const previewFilename = {{.PreviewFilename}};
    const prefixName = {{.PrefixName}};
    const keyPrefix = {{.KeyPrefix}};
    const fullProductExtension = {{.FullProductExtension}};
    const imageTypes = {{.ImageTypes}};
    const retentionPeriod = {{.RetentionPeriod}}; // in seconds
    const refreshPeriod = {{.PollingPeriod}}; // in seconds
    const maxImagesDisplayCount = {{.MaxImagesDisplayCount}};

    const inputs = {};
    const searchInput = document.getElementById("search");
    const container = document.querySelector("div.container");
    const modal = document.getElementById("modal");
    const modalImg = document.getElementById("modal-img");
    const modalFeatures = document.getElementById("modal-features");
    const modalLinks = document.getElementById("modal-links");
    const thumbnails = document.getElementById("modal-thumbnails");

    let displayNewImages = true;
    let imagesGeonamesToDisplay = {};

    function formatTitle(title) {
        if (title.includes("@")) {
            title = title.substring(0, title.lastIndexOf("@"));
            title = title.substring(title.lastIndexOf("@") + 1);
            return title;
        }
        let kPrefix = keyPrefix.length > 0 ? keyPrefix + "@" : "";
        for (const imageType of imageTypes) {
            if (title.startsWith(kPrefix + imageType.name)) {
                title = title.substring(prefixName.length === 0 ? 0 : prefixName.length + 1, title.lastIndexOf("@")).replaceAll("@", "/"); // .replace("/" + previewFilename, "");
                const imgType = title.substring(0, title.indexOf("@"));
                const imgName = title.substring(title.lastIndexOf("@") + 1);
                return imgType + "\n" + imgName;
            }
        }
        return title;
    }

    function createThumbnail(thumbnailUrl) {
        const container = document.createElement("div");
        container.classList.add("thumbnail-container");
        const img = document.createElement("img");
        img.src = thumbnailUrl;
        const a = document.createElement("a");
        a.classList.add("img-title");
        a.href = thumbnailUrl;
        a.target = "_blank";
        let text = thumbnailUrl.substring(0, thumbnailUrl.lastIndexOf("@"));
        text = text.substring(text.lastIndexOf("@") + 1);
        a.innerText = text;
        container.appendChild(img);
        container.appendChild(a);
        return container;
    }

    function makeGeoFeature(l) {
        return {
            type: "FeatureCollection",
            features: [
                {
                    'type': 'Feature',
                    'geometry': {
                        'type': 'Polygon',
                        'coordinates': [
                            [
                                [l.corner["upper-left"].coordinates.lon, l.corner["upper-left"].coordinates.lat],
                                [l.corner["upper-right"].coordinates.lon, l.corner["upper-right"].coordinates.lat],
                                [l.corner["lower-right"].coordinates.lon, l.corner["lower-right"].coordinates.lat],
                                [l.corner["lower-left"].coordinates.lon, l.corner["lower-left"].coordinates.lat],
                                [l.corner["upper-left"].coordinates.lon, l.corner["upper-left"].coordinates.lat],
                            ],
                        ],
                    },
                }]
        };
    }

    function displayCarto(carto, localization, display) {
        if (cartoLayer) {
            cartoMap.removeLayer(cartoLayer);
        }
        cartoLayer = new ol.layer.Vector({
            source: new ol.source.Vector({
                features: new ol.format.GeoJSON().readFeatures(makeGeoFeature(localization))
            }),
            style: new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: "blue",
                    width: 3
                })
            })
        });
        cartoMap.addLayer(cartoLayer);
        const ulLon = localization.corner["upper-left"].coordinates.lon
        const urLon = localization.corner["upper-right"].coordinates.lon
        const lrLon = localization.corner["lower-right"].coordinates.lon
        const llLon = localization.corner["lower-left"].coordinates.lon
        const ulLat = localization.corner["upper-left"].coordinates.lat
        const urLat = localization.corner["upper-right"].coordinates.lat
        const lrLat = localization.corner["lower-right"].coordinates.lat
        const llLat = localization.corner["lower-left"].coordinates.lat

        const centerLon = (ulLon + urLon + lrLon + llLon) / 4.0;
        const centerLat = (ulLat + urLat + lrLat + llLat) / 4.0;
        cartoMap.getView().setCenter([centerLon, centerLat]);

        const marginPercent = 10;
        const deltaX = Math.abs(ulLon - urLon) * marginPercent / 100;
        const deltaY = Math.abs(ulLat - llLat) * marginPercent / 100;
        cartoExtent = [Math.min(ulLon, llLon) - deltaX, Math.min(llLat, lrLat) - deltaY,
            Math.max(urLon, lrLon) + deltaX, Math.max(ulLat, urLat) + deltaY]

        if (display) {
            carto.style.display = "block";
            cartoMap.updateSize();
            cartoMap.getView().fit(cartoExtent);
        }
    }

    function modalize(img) {
        while (modalLinks.hasChildNodes()) {
            modalLinks.removeChild(modalLinks.firstChild);
        }
        while (thumbnails.hasChildNodes()) {
            thumbnails.removeChild(thumbnails.firstChild);
        }
        const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
        fetch("{{.BasePath}}/infos/" + img.alt + "?tz=" + timezone).then(response => { // .replaceAll("@", "/")
            document.getElementById("carto-coords").style.display = "none";
            response.json().then(jsonData => {
                jsonData = jsonData.data;
                document.getElementById("modal-img-date").innerText = jsonData["date"];
                const features = jsonData["features"];
                const objects = features["objects"];
                if (objects && Object.keys(objects).length > 0) {
                    document.getElementById("features-type").innerText = features["class"] + ": ";
                    document.getElementById("features-count").innerText = features["featuresCount"];
                } else {
                    document.getElementById("features-type").innerText = "";
                    document.getElementById("features-count").innerText = "";
                }
                if (jsonData["geonames"].length > 0) {
                    const mainGeonames = jsonData["geonames"].split("\n").slice(0, 3).map(geoname => geoname.trim());
                    document.getElementById("geonames").innerHTML = mainGeonames.join(" / ")
                        + '<br /><div id="geonames-full">' + jsonData['geonames'] + '</div>';
                } else {
                    document.getElementById("geonames").innerHTML = "";
                }
                if (jsonData["links"].length !== 0) {
                    modalLinks.style.visibility = "visible";
                    for (const link of jsonData["links"]) {
                        const li = document.createElement("li");
                        const a = document.createElement("a");
                        a.target = "_blank";
                        a.href = link;
                        let formattedLink = link.substring(Math.max(link.lastIndexOf("/") + 1, link.lastIndexOf("%2F") + 3));
                        if (formattedLink.indexOf("?") !== -1) {
                            formattedLink = formattedLink.substring(0, formattedLink.indexOf("?"));
                        }
                        if (fullProductExtension && formattedLink.indexOf(fullProductExtension) !== -1) {
                            formattedLink = formattedLink.substring(0, formattedLink.indexOf(fullProductExtension) + fullProductExtension.length);
                        }
                        a.innerText = formattedLink;
                        li.appendChild(a);
                        modalLinks.appendChild(li);
                    }
                } else {
                    modalLinks.style.visibility = "hidden";
                }
                const cartoThumbnailsToggle = document.getElementById("carto-thumbnails-toggle");
                const thumbnailsCount = document.getElementById("thumbnails-count");
                const scaler = document.getElementById("thumbnails-scaler");
                const carto = document.getElementById("modal-carto");
                carto.style.display = "none";
                if (jsonData["thumbnails"].length > 0) {
                    thumbnailsCount.style.display = "block";
                    thumbnailsCount.innerHTML = "Count:&nbsp;&nbsp;<strong>" + jsonData["thumbnails"].length + "</strong>";
                    scaler.style.display = "block";
                    thumbnails.style.display = "flex";
                    for (const thumbnail of jsonData["thumbnails"]) {
                        thumbnails.appendChild(createThumbnail(thumbnail));
                    }
                    thumbnailsScaler.updateScale();

                    if (jsonData["localization"]) {
                        cartoThumbnailsToggle.style.visibility = "visible";
                        cartoThumbnailsToggle.innerText = "Map";
                        cartoThumbnailsToggle.setAttribute("toggled", "thumbnails");
                        displayCarto(carto, jsonData["localization"], false);
                    } else {
                        cartoThumbnailsToggle.style.visibility = "hidden";
                    }
                } else {
                    thumbnailsCount.style.display = "none";
                    thumbnailsCount.innerHTML = "";
                    scaler.style.display = "none";
                    thumbnails.style.display = "none";

                    cartoThumbnailsToggle.style.visibility = "hidden";
                    if (jsonData["localization"]) {
                        displayCarto(carto, jsonData["localization"], true);
                    }
                }
            }).catch(reason => {
                console.warn("Failed to modalize image:", reason);
            });
        }).catch(reason => {
            console.warn("Failed to get image links:", reason);
        });
        modalImg.classList.add("show");
        modalImg.src = img.src;
        modalImg.alt = img.alt;
        modalImg.parentElement.href = img.src;
        const parentDiv = img.parentElement.parentElement;
        let imgName = formatTitle(parentDiv.getAttribute("img-name"));
        /*if (imageTypes.map(imgType => imgType.name).includes(imgName.substring(0, imgName.indexOf("\n")))) {
            imgName = imgName.substring(imgName.indexOf("\n") + 1);
        }*/
        const rawType = parentDiv.getAttribute("img-type");
        document.getElementById("modal-img-type").innerText = imageTypes.find(imgType => imgType.name === rawType).displayName;
        document.getElementById("modal-img-name").innerText = imgName;
        modal.style.display = "flex";
    }

    function addNewImg(img, date, addToList = true) {
        const imgKey = img["img_key"]
        const newImg = document.createElement("img");
        newImg.src = "{{.BasePath}}/image/" + imgKey + "?time=" + Date.now();
        newImg.alt = imgKey;
        newImg.title = img["img_type"] + "\n";
        const previewParts = imgKey.split("@");
        if (previewParts.length >= 2) {
            newImg.title += previewParts[previewParts.length - 2] + "\n";
        }
        newImg.title += img["img_date"];
        newImg.style.maxWidth = globalScaler.currentImgWidth;
        newImg.style.minWidth = globalScaler.currentImgWidth;
        newImg.addEventListener("click", () => modalize(newImg));
        const newPre = document.createElement("pre");
        newPre.classList.add("image-features");
        const newA = document.createElement("a");
        newA.classList.add("img-title");
        newA.href = "{{.BasePath}}/image/" + imgKey;
        newA.target = "_blank";
        newA.title = "Click to open the image in a new tab";
        newA.style.fontSize = globalScaler.currentFontSize;
        newA.innerHTML = formatTitle(img["img_name"]).replace(/_/g, "_<wbr />");
        const featuresContainer = document.createElement("div");
        featuresContainer.classList.add("features-container");
        featuresContainer.appendChild(newImg);
        featuresContainer.appendChild(newPre);
        const imgContainer = document.createElement("div");
        imgContainer.classList.add("img-container");
        imgContainer.appendChild(featuresContainer);
        imgContainer.appendChild(newA);
        const imgType = img["img_type"]; // img.substring(prefixName.length === 0 ? 0 : prefixName.length + 1).split("@")[0];
        imgContainer.setAttribute("img-type", imgType);
        imgContainer.setAttribute("img-name", imgKey); // imgTitle.substring(imgTitle.indexOf("\n") + 1)
        if (inputs.hasOwnProperty(imgType)) {
            if (!inputs[imgType].checked) {
                imgContainer.classList.add("filter-hidden");
            }
        }
        const searchValue = searchInput.value.toLowerCase();
        if (searchValue !== "") {
            if (!newA.innerText.toLowerCase().includes(searchValue) && !newA.href.toLowerCase().substring("/image/".length).includes(searchValue)) {
                imgContainer.classList.add("search-hidden");
            }
        }

        container.insertBefore(imgContainer, container.firstChild);
        if (container.childElementCount > maxImagesDisplayCount) {
            container.removeChild(container.lastElementChild);
        }
        if (addToList) {
            // images[img["img_key"]] = date;
            images.unshift({
                "img_type": imgType,
                "img_key": imgKey,
                "img_name": imagesGeonamesToDisplay.hasOwnProperty(img["img_name"]) ? imagesGeonamesToDisplay[img["img_name"]] : img["img_name"],
            })
        }
        countImages();
        newImg.onerror = () => {
            console.warn("Image", img["img_key"], "not found");
        };
    }

    function pollEverything() {
        fetch("{{.BasePath}}/images").then(response => {
            if (!response.ok) {
                console.error("Failed to poll everything:", response.statusText);
                return;
            }
            response.json().then(jsonResponse => {
                const newImages = jsonResponse.data;
                // console.info("Response:", jsonResponse);
                const sortedImages = [];
                for (const img in newImages) {
                    sortedImages.push([img, new Date(newImages[img])]);
                }
                sortedImages.sort((a, b) => a[1] - b[1]);
                sortedImages.forEach(img => {
                    addNewImg({
                        img_key: img[0],
                        img_name: imagesGeonamesToDisplay.hasOwnProperty(img[0]) ? imagesGeonamesToDisplay[img[0]] : img[0],
                    }, img[1]);
                });
                imagesGeonamesToDisplay = {};
            }).catch(reason => console.error("Failed to parse reponse to Json:", reason));
        }).catch(reason => console.error("Failed to fetch images list:", reason)).finally(() => displayNewImages = true);
    }

    function closeModal() {
        modalImg.classList.remove("show");
        modal.style.display = "";
    }

    function fetchFeatures(parentDiv) {
        const img = parentDiv.querySelector("div.features-container img");
        fetch("{{.BasePath}}/infos/" + img.alt).then(response => {
            response.json().then(jsonData => {
                const features = jsonData.data["features"]?.objects;
                if (features && Object.keys(features).length > 0) {
                    const pre = parentDiv.querySelector("pre.image-features");
                    for (const feature in features) {
                        pre.innerHTML += `&nbsp;${feature}: ${features[feature]}&nbsp;\n`
                    }
                }
            });
        });
    }

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll(".img-title").forEach(a => {
            let imgName = a.innerText
            if (imgName.includes("@")) {
                imgName = imgName.substring(0, imgName.lastIndexOf("@"));
                imgName = imgName.substring(imgName.lastIndexOf("@") + 1);
                a.innerText = imgName; // formatTitle(a.innerText);
            }
            a.innerHTML = a.innerHTML.replace(/_/g, "_<wbr />");
        });
        document.querySelectorAll("img:not(#modal-img)").forEach(img => {
            img.parentElement.addEventListener("click", () => modalize(img));
            // /!\ WARNING: setTimeout() does not work with durations greater than 24 days /!\
            /*setTimeout(() => {
                for (let i in images) {
                    if (img.src.endsWith(images[i].img_key)) {
                        console.info("Removing image '" + img.src + "' after timeout.");
                        container.removeChild(img.parentElement);
                        images.splice(i, 1);
                        countImages();
                        break;
                    }
                }
                /!*if (images.hasOwnProperty(img.src)) {
                    container.removeChild(img.parentElement);
                    delete images[img.src];
                    countImages();
                }*!/
            }, retentionPeriod * 1000);*/
            const previewParts = img.title.split("@");
            img.title = img.parentElement.parentElement.getAttribute("img-type") + "\n";
            if (previewParts.length >= 2) {
                img.title += previewParts[previewParts.length - 2] + "\n";
            }
            img.title += img.parentElement.parentElement.getAttribute("img-date");
        });

        /*modal.addEventListener("click", ev => {
            if (ev.target.localName === "a" || ev.target.localName === "input") {
                // Don't close modal when clicking on a link or an input
                return;
            }
            closeModal();
        });*/

        document.querySelectorAll(".filters .img-group-dropdown-content input[type=checkbox]").forEach(inpt => {
            inpt.checked = true;
            // const value = inpt.parentElement.innerText.trim();
            const value = inpt.name;
            inputs[value] = inpt;
            inpt.addEventListener("input", () => {
                const imgGroup = inpt.getAttribute("img-group");
                const checkAllParent = document.querySelector(`.filters .img-group-dropdown input[name='${imgGroup}'].check-all`);
                const others = Array.from(document.querySelectorAll(".filters .img-group-dropdown-content input[type=checkbox]")).filter(e => e.getAttribute("img-group") === imgGroup);
                if (inpt.checked) {
                    document.querySelectorAll(`div[img-type="${value}"]`).forEach(container => container.classList.remove("filter-hidden"));
                    if (others.every(input => input.checked)) {
                        checkAllParent.indeterminate = false;
                        checkAllParent.checked = true;
                    } else {
                        checkAllParent.indeterminate = true;
                    }
                } else {
                    document.querySelectorAll(`div[img-type="${value}"]`).forEach(container => container.classList.add("filter-hidden"));
                    if (others.every(input => !input.checked)) {
                        checkAllParent.indeterminate = false;
                        checkAllParent.checked = false;
                    } else {
                        checkAllParent.indeterminate = true;
                    }
                }
                countImages();
            });
        });

        searchInput.value = "";
        searchInput.addEventListener("input", () => {
            const value = searchInput.value.toLowerCase();
            if (value === "") {
                document.querySelectorAll("div.search-hidden").forEach(container => container.classList.remove("search-hidden"));
            } else {
                document.querySelectorAll("div > a.img-title").forEach(a => {
                    if (a.href.toLowerCase().substring((location.href.length - 1) + "{{.BasePath}}/image/".length).includes(value) || a.innerHTML.toLowerCase().includes(value)) {
                        a.parentElement.classList.remove("search-hidden");
                    } else {
                        a.parentElement.classList.add("search-hidden");
                    }
                });
            }
            countImages();
        });

        if (window["WebSocket"]) {
            const wsProtocol = location.protocol === "https:" ? "wss:" : "ws:";
            const conn = new WebSocket(wsProtocol + "//" + document.location.host + ("{{.BasePath}}".length > 0 ? "{{.BasePath}}/" : "") + "/ws");
            conn.onerror = function (evt) {
                console.error("WebSocket connection error:", evt);
            };
            conn.onclose = function (evt) {
                console.warn("WebSocket connection closed:", evt);
            };
            conn.onmessage = function (evt) {
                const msg = evt.data;
                const event = JSON.parse(msg);
                console.info("Data update:", event);
                const imgKey = event["event_obj"] != null ? event["event_obj"]["img_key"] : null;
                const imgSrc = imgKey.replaceAll('/', '@');
                const alreadyLoaded = images.reduce((found, img) => img["img_key"] === imgKey ? true : found, false); // look for imgKey in images
                const parentDiv = container.querySelector(`div[img-name="${imgSrc}"]`);
                switch (event["event_type"]) {
                    case "ADD":
                    case "UPDATE":
                        if (!displayNewImages) {
                            break;
                        }
                        if (alreadyLoaded) {
                            let imgToRemove = document.querySelector('img[src*="{{.BasePath}}/image/'+imgKey+'"]');
                            container.removeChild(imgToRemove.parentElement.parentElement);
                            for (let i in images) {
                                if (images[i].img_key === imgKey) {
                                    images.splice(i, 1);
                                    break;
                                }
                            }
                        }
                        addNewImg(event["event_obj"], event["event_date"]);
                        if (event["event_type"] === "UPDATE" && parentDiv != null) {
                            // Do not pass parentDiv because the element has been removed
                            fetchFeatures(container.querySelector(`div[img-name="${imgSrc}"]`));
                        }
                        break;
                    case "REMOVE":
                        if (alreadyLoaded) {
                            container.removeChild(document.querySelector('img[src*="{{.BasePath}}/image/'+imgKey+'"]').parentElement.parentElement);
                            // delete images[imgKey];
                            for (let i in images) {
                                if (images[i].img_key === imgKey) {
                                    images.splice(i, 1);
                                    break;
                                }
                            }
                            countImages();
                        }
                        break;
                    case "GEONAMES":
                        if (!displayNewImages) {
                            imagesGeonamesToDisplay[imgSrc] = event["event_obj"]["geonames"];
                            break;
                        }
                    {{/*const imgElement = container.querySelector(`img[src*="{{.BasePath}}/image/${imgSrc}"]`);*/}}
                        if (parentDiv != null) {
                            const title = parentDiv.querySelector("a.img-title");
                            if (title != null) {
                                title.innerText = event["event_obj"]["geonames"];
                            }
                        }
                        break;
                    case "FEATURES":
                        if (parentDiv != null) {
                            const pre = parentDiv.querySelector("pre.image-features");
                            const features = event["event_obj"]["features"];
                            pre.innerHTML = "";
                            for (const feature in features) {
                                pre.innerHTML += `&nbsp;${feature}: ${features[feature]}&nbsp;\n`
                            }
                        }
                        break;
                    case "RESET":
                        console.info("Reset !");
                        displayNewImages = false;
                        /*Object.keys(images).forEach(function (key) {
                            delete images[key];
                        });*/
                        images.length = 0; // clear array
                        while (container.hasChildNodes()) {
                            container.removeChild(container.firstChild);
                        }
                        countImages();
                        setTimeout(pollEverything, refreshPeriod * 1000);
                        break;
                    default:
                        console.warn("Unknown event type:", event["event_type"]);
                        break;
                }
            };
        } else {
            console.error("Your browser does not support WebSockets");
        }
    });
</script>
</body>
</html>
